[tool.poetry]
name = "mirar"
version = "0.19.0"
description = "Modular Image Reduction and Analysis Resource (MIRAR)"
authors = ["Robert Stein <rdstein@caltech.edu>", "Viraj Karambelkar <viraj@astro.caltech.edu>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/winter-telescope/mirar"

[tool.poetry.dependencies]
python = ">=3.10.0,<3.13"
astroplan = ">=0.8,<0.11"
astropy = "^6.0.0"
astroquery = "^0.4.7"
avro = "^1.11.3"
certifi = ">=2023.7.22,<2025.0.0"
coveralls = {extras = ["toml"], version = ">=3.3.1,<5.0.0"}
confluent-kafka = "^2.3.0"
docker = ">=6.1.3,<8.0.0"
ephem = "^4.1.5"
fastavro = "^1.7.4"
jupyter = "^1.0.0"
matplotlib = "^3.7.1"
mocpy = "^0.12.0"
lacosmic = "^1.0.0"
numpy = ">=1.24.3,<1.27.0"
pandas = "^2.0.2"
penquins = "^2.3.1"
photutils = ">=1.8,<3.0"
psycopg = {extras = ["binary"], version = "^3.1.9"}
pydl = "^1.0.0"
pyFFTW = ">=0.13.1,<0.15.0"
setuptools = ">=67.8,<76.0"
watchdog = ">=3,<7"
wget = "^3.2"
toml = "^0.10.2"
pandas-stubs = "^2.0.1.230501"
autopep8 = "^2.0.2"
sqlalchemy = "^2.0.15"
pydantic = "^2.1.1"
pylint-pydantic = ">=0.1.6,<0.4.0"
astrosurveyutils = "^0.0.1"
urllib3 = "^2.0.7"
sqlalchemy-utils = "^0.41.1"
wintertoo = "^1.7.1"
scipy = "^1.12.0"
python-dotenv = "^1.0.1"
pyarrow = ">=15.0.2,<19.0.0"
torch = "^2.2.0,<2.3.0"
winterrb = "^1.0.0"

[tool.poetry.group.docs.dependencies]
sphinx = ">=7.0.1,<9.0.0"
sphinx-rtd-theme = ">=2,<4"
sphinx-mdinclude = ">=0.5.3,<0.7.0"
rstcloth = "^0.6.0"

[tool.poetry.group.dev.dependencies]
black = "^24.1.1"
pre-commit = ">=3.6,<5.0"
isort = {extras = ["pyproject"], version = "^5.12.0"}
pylint = ">=2.17.1,<4.0.0"
mypy = "^1.3"
types-requests = "^2.31.0.1"
types-toml = "^0.10.8.6"

[tool.coverage.run]
source = ["mirar"]
concurrency = ["thread"]
omit = ["mirar/__main__.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "raise KeyError",
    "except KeyError",
    "raise ValueError",
    "except JSONDecodeError:",
    "raise requests.exceptions.RequestException",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    'if __name__ == "__main__":',
    "err =",
    "logger.error",
    "raise"
    ]
ignore_errors = true

[tool.isort]
profile = "black"

[tool.pylint.MASTER]
load-plugins = "pylint_pydantic"

[tool.pylint.format]
max-line-length = "88"
disable=["logging-fstring-interpolation"]
good-names=["i", "j", "k", "ex", "Run", "_", "ra", "pa", "x", "y", "nx", "ny", "dx", "dy"]
exclude-too-few-public-methods=["pydantic.*"]
extension-pkg-whitelist=["pydantic"]

[tool.pylint.typecheck]
generated-members=["u.*"]

[tool.poetry.scripts]
mirar-run = 'mirar.__main__:main'
mirar-docs-autogen = "mirar.utils.docs:iterate_rst_generation"
winter-stack = 'mirar.pipelines.winter.run:run_stack_of_stacks'

[build-system]
requires = ["setuptools", "wheel", "poetry-core>=1.8.0",]
build-backend = "poetry.core.masonry.api"
